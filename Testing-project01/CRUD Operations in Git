CRUD Operations in Git



Reverting the previous commits.

get the hash by running==> git log

You can run ==> git log - -online 


You can revert the previous commits by running==>git revert <commit hash>

Revert command
Execution:
===================================

Step 1: Check the commit id that you want to revert

take the deletion commit id

# git log --oneline

copy the seven digits

c9bf927

Step 2: Execute the revert command

# git revert c9bf927

press enter key, it will open a nano editor file

asking you to insert some message

Save the file:  press CTL x ==> press y ==> press enter key

Step 3: fiel will be abck in LR and WD

git ls-files

ls


●You can fix the detached head by running==> git checkout <current branch>

example:git checkout feature1

====================================================================================================

Ignoring specific files from the .git directory.

●Create a .gitignore file in the directory of the files which needs to be checked in to your GitHub account. 

nano .gitignore


Step 1: Create some files that we will ignore

# touch file.txt file2.xml file3.log file4.class

Step 2: Check the status of the files in GIT

# git status

files will be untracked, git is suggesting to add and commit them in local  repo

Step 3: We do not want to add them or commit them, we want to ignore these files

# nano .gitignore

insert below text

*.txt
*.log
*.xml
*.class

Save the file and exit

press CTL x and press y  and press enter key


In this file add names of the files to be ignored
In this file names will added, 1 filename 1 line
Suppose you want to ignore all xml files or all .class files, so entry in the file cna be made like

*.xml
*.class
file.txt
*.txt

As you will save the file, git will start ignoring all the files



Step 4: Check the status now and commit .gitignore file


# git status

# git add .

# git commit -m "done .gitignore"


=====================================================================================================

Pulling the commits and collaborating between the local and remote repositories.

●The git pull command first runs git fetch which downloads content from the specified remote repository

Pull command
==================================
This operation is perfmoed on local git repo to get the files and commits from remote repo

git pull origin master


This command will perform 2 operations

1. fetch the changes form remote to local repo ---> it places the chnage sina  file called FETCH_HEAD
 
2. Adds the files into local repo and WD. also updates commit history

======================================================================

Fetch command:
=================================

If we want to just fetch the changes from remote repo into our local repo
to check if there are new changes in remote which are not in my local branch

Then we can use fetch command/operation

This command will perform 1 operation

1. fetch the changes from remote to local repo ---> it places the changes in a   file called FETCH_HEAD in .git folder

2. This command will not copy your files into local repo and WD. doesnot update commit history

=================================================



Merge command:
==================================

works on local repository- in between you branches


1. How many branches we have it git. And then create a branch in git

   # git branch

Create a branch

   # git branch feature1  
   # git branch
  

2. switch to branch

  # git checkout feature1

3. Create some new commit on the new branch feature1

  # touch feature1file featurefile2
  # git add .
  # git commit -m "done on feature1"

4. Switch to master branch

  # git checkout master

5. merge the new branch to master branch

  # git merge feature1 master



===================================================================


Rebase Command: merging strategy
============================

1. Create a new branch feature1 (base of which is master) and switch to the branch 

# git branch

#  git checkout -b feature1

2. create new commits on feature 1 branch

  # touch file-feature
  # git add .
  # git commit -m "done on feature"

3. switch to master and create new commits

  # git checkout master

    # touch file-master
  # git add .
  # git commit -m "done on master"

4. No merging of feature1 on master -Done

5. Switch back to feature1 and do rebase command (re organize the base branch commits)

# git rebase master




